-- Create the issues table to store all reports
CREATE TABLE public.issues (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  issue_type TEXT NOT NULL,
  user_description TEXT NOT NULL,
  ai_description TEXT, -- Optional AI-generated description
  image_url TEXT NOT NULL,
  latitude DOUBLE PRECISION,
  longitude DOUBLE PRECISION,
  status TEXT DEFAULT 'reported' NOT NULL -- e.g., 'reported', 'in_progress', 'resolved'
);

-- Create the profiles table to store user information
CREATE TABLE public.profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  full_name TEXT,
  phone TEXT,
  city TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Enable Row Level Security on both tables
ALTER TABLE public.issues ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Define RLS Policies for issues table
-- Policy: Allow authenticated users to insert their own issues.
CREATE POLICY "Allow users to insert their own issues"
ON public.issues FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Policy: Allow all users to view all reported issues.
CREATE POLICY "Allow all users to view issues"
ON public.issues FOR SELECT
USING (true);

-- Policy: Allow users to update their own issues
CREATE POLICY "Allow users to update their own issues"
ON public.issues FOR UPDATE
USING (auth.uid() = user_id);

-- Policy: Allow users to delete their own issues
CREATE POLICY "Allow users to delete their own issues"
ON public.issues FOR DELETE
USING (auth.uid() = user_id);

-- Define RLS Policies for profiles table
-- Policy: Allow users to view their own profile
CREATE POLICY "Allow users to view own profile"
ON public.profiles FOR SELECT
USING (auth.uid() = id);

-- Policy: Allow users to insert their own profile
CREATE POLICY "Allow users to insert own profile"
ON public.profiles FOR INSERT
WITH CHECK (auth.uid() = id);

-- Policy: Allow users to update their own profile
CREATE POLICY "Allow users to update own profile"
ON public.profiles FOR UPDATE
USING (auth.uid() = id);

-- Policy: Allow users to delete their own profile
CREATE POLICY "Allow users to delete own profile"
ON public.profiles FOR DELETE
USING (auth.uid() = id);

-- Create a trigger to automatically create a profile when a user signs up
-- Drop the trigger if it exists first
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email, full_name, created_at, updated_at)
  VALUES (NEW.id, NEW.email, COALESCE(NEW.raw_user_meta_data->>'full_name', ''), NOW(), NOW());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create the trigger
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
